------------------------------------------------------------------------------
                       OpenVX* Lane Detection Sample
                                    README
------------------------------------------------------------------------------
This README provides sample description and build/execution instructions.

CONTENTS:

  1 - Sample Description
  2 - System Requirements for Building and Running the Sample
  3 - Sample Directory
  4 - Basic Command-line Options

1 Sample Description
------------------------------------------------------------------------------

Lane Detection sample is an educational OpenVX* sample that includes a
simple pipeline, based on perspective transform, filtering and Hough transform
to detect lane marks on the road.

The following OpenVX graph is build and run in the sample

   [InputRGB]       Input 8U 3 channel RGB image
       |
 (ColorConvert)     Convert image from RGB to YUV format
       |
     [YUV]
       |
(ChannelExtract)    Extract Y component as gray image
       |
      [Y]
       |
(WarpPerspective)   Transform input image to get top view of the road
       |
   [Top view]
       |
   (Convolve)       Run convolution filter to get strong response on lane marks
       |
    [Edges]
       |
  (Threshold)       Threshold filter responce to mark strongest pixels for hough transform
       |
    [Mask]
       |
 (HoughLinesP)      run probabilistic Hough Transform to detect line segments
       |
[Line segments]


Additionally, the sample features basic interoperability with OpenCV through
data sharing. OpenCV is used for reading the data from a video file.

The sample can work in two modes (controlled by a special knob in the command line):
- as a console application. In this mode, you can use the sample as a benchmark
  to measure performance.
- as an application with GUI windows.

Refer to the sample User's Guide (PDF) for details.

2 System Requirements for Building and Running the Sample
------------------------------------------------------------------------------

You need the following software to compile the sample:
  - Ubuntu* 16.04, CentOS 7.3 or Windows 10 operating system
  - CMake 2.8.12 and higher
  - gcc 4.8.4 and higher (Ubuntu only)
  - GStreamer* 1.0 (Ubuntu only)
  - Microsoft Visual Studio 2015 (Windows only)
  
Note, that not all samples support build under Windows.

See the README file in the sample root directory for information on installing 
and running the samples and system requirements for target platforms.


3 Sample Directory
------------------------------------------------------------------------------

The sample directory has the following structure:
 -- lane_detection
    |-- CMakeLists.txt              (CMake file for the sample)
    |-- collect_lane_marks.cpp/hpp  (C++ class that implements finalization
    |                                the processing result)
    |-- lane_detection.cpp          (main file with OpenVX pipeline)
    |-- road_lane.mp4               (default video file for processing)
    |-- lane_detection.graphml	    (file with graph for VAD)
    |-- lane_detection_user_nodes_module.cpp
    |                               (file to create user node for VAD)
    |-- sample_lane_detection_user_guide.pdf
    |                               (sample documentation)
    `-- README                      (this readme file)

4 Basic Command-line Options
------------------------------------------------------------------------------
NOTE: command line parameters (keys and values) are case-sensitive.

To get detailed list of command-line parameters, run the sample with -h
(--help):

    $ ./lane_detection --help

By default the sample loads and processes the road_lane.mp4.
You can change the input with -i/--input option.
Example command-line:

    $ ./lane_detection --input your_video_file_name

Visualization can be disable with the --no-show parameter. If the parameter is
not set then visualization is enabled and GUI windows show the result videos.

Debug output can be enabled with the --debug-output parameter. In this case
two additional windows with Hough transform result drawn over Edges images and
performance window that shows relative execution time for each node are
displayed.

Example command-line to enable debug output and show the result in a GUI window:

    $ ./lane_detection --debug-output

Disclaimer and Legal Information
------------------------------------------------------------------------------
No license (express or implied, by estoppel or otherwise) to any intellectual 
property rights is granted by this document.

Intel disclaims all express and implied warranties, including without 
limitation, the implied warranties of merchantability, fitness for a 
particular purpose, and non-infringement, as well as any warranty arising from
 course of performance, course of dealing, or usage in trade.

This document contains information on products, services and/or processes in 
development.  All information provided here is subject to change without 
notice. Contact your Intel representative to obtain the latest forecast, 
schedule, specifications and roadmaps.

The products and services described may contain defects or errors known as 
errata which may cause deviations from published specifications. Current 
characterized errata are available on request. 

Intel and the Intel logo are trademarks of Intel Corporation in the U.S. 
and/or other countries.

* Other names and brands may be claimed as the property of others.

OpenVX and the OpenVX logo are trademarks of Khronos.

Copyright (c) 2017 Intel Corporation. All rights reserved.

